{"version":3,"sources":["webpack:///./src/pages/visitbaidu/validate.js"],"names":["Vue","component","vSelect","use","VeeValidate","locale","events","inject","Validator","localize","zh_CN","messages","email","required","name","max","field","num","min","in","numeric","attributes","sex","unit","position","phone","id_card","people_number","visit_item","visit_place","visit_name","visit_reason","visit_date_string","extend","getMessage","validate","value","test","params","data","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default","a","resolve","_float_result","_message","isNaN","Number","valid","RegExp","length","val","parseFloat","code","pass","11","12","13","14","15","21","22","23","31","32","33","34","35","36","37","41","42","43","44","45","46","50","51","52","53","54","61","62","63","64","65","71","81","82","91","substr","split","factor","parity","sum","i","IdentityCodeValid","toString"],"mappings":"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","file":"js/validate.4899a793509cc40428f9.js","sourcesContent":["import Vue from 'vue'\nimport vSelect from 'vue-select'\nimport VeeValidate, {\n  Validator\n} from 'vee-validate'\nVue.component('v-select', vSelect)\nconst config = {\n  locale: 'zh_CN',\n  events:'input',\n  inject: true,\n};\nVue.use(VeeValidate, config);\n//身份证\nfunction IdentityCodeValid(code) {\n  var city = {\n    11: \"北京\",\n    12: \"天津\",\n    13: \"河北\",\n    14: \"山西\",\n    15: \"内蒙古\",\n    21: \"辽宁\",\n    22: \"吉林\",\n    23: \"黑龙江 \",\n    31: \"上海\",\n    32: \"江苏\",\n    33: \"浙江\",\n    34: \"安徽\",\n    35: \"福建\",\n    36: \"江西\",\n    37: \"山东\",\n    41: \"河南\",\n    42: \"湖北 \",\n    43: \"湖南\",\n    44: \"广东\",\n    45: \"广西\",\n    46: \"海南\",\n    50: \"重庆\",\n    51: \"四川\",\n    52: \"贵州\",\n    53: \"云南\",\n    54: \"西藏 \",\n    61: \"陕西\",\n    62: \"甘肃\",\n    63: \"青海\",\n    64: \"宁夏\",\n    65: \"新疆\",\n    71: \"台湾\",\n    81: \"香港\",\n    82: \"澳门\",\n    91: \"国外 \"\n  };\n  var tip = \"\";\n  var pass = true;\n  if (!code || !/^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[012])(0[1-9]|[12]\\d|3[01])\\d{3}(\\d|X)$/i.test(code)) {\n    tip = \"身份证号格式错误\";\n    pass = false;\n  } else if (!city[code.substr(0, 2)]) {\n    tip = \"地址编码错误\";\n    pass = false;\n  } else {\n    //18位身份证需要验证最后一位校验位\n    if (code.length == 18) {\n      code = code.split('');\n      //∑(ai×Wi)(mod 11)\n      //加权因子\n      var factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n      //校验位\n      var parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2];\n      var sum = 0;\n      var ai = 0;\n      var wi = 0;\n      for (var i = 0; i < 17; i++) {\n        ai = code[i];\n        wi = factor[i];\n        sum += ai * wi;\n      }\n      var last = parity[sum % 11];\n      if (parity[sum % 11] != code[17]) {\n        tip = \"校验位错误\";\n        pass = false;\n      }\n    }\n  }\n  // if (!pass) console.log(tip);\n  return pass;\n}\n//自定义validate\nconst dictionary = {\n  zh_CN: {\n    messages: {\n      email: () => '请输入正确的邮箱格式',\n      required: (name) => name + \"不能为空\",\n      max: (field, num) => \"不能大于\" + num + \"个字符\",\n      min: (field, num) => \"不能小于\" + num + \"个字符\",\n      in: () => \"请选择正确值\",\n      numeric: () => \"该选项必须为数字\"\n    },\n      attributes: {\n        name: '姓名',\n        sex:'性别',\n        unit:'学校',\n        position:'职位',\n        phone: '联系方式',\n        email: '邮箱',\n        id_card:'身份证',\n        people_number:'参观人数',\n        visit_item:'参观项目',\n        visit_place:'参观地点',\n        visit_name:'参观名称',\n        visit_reason:'参观原因',\n        visit_date_string:'参观时间'\n      }\n  }\n};\nValidator.localize(dictionary);\n\nValidator.extend('fbphone', {\n  getMessage: field => '请输入正确的电话号码',\n  validate: value => {\n    return (/^((13|14|15|16|17|18|19)[0-9]{1}\\d{8})$/.test(value)) || (/^0\\d{2,3}-?\\d{7,8}$/.test(value));\n  }\n});\nValidator.extend('liuliangka', {\n  // getMessage: field => '请输入正确的SIM卡号',\n  // validate: value => {\n  //   return (/^((13|14|15|16|17|18|19)[0-9]{1}\\d{8})$/.test(value)||/^((1)\\d{12})$/.test(value)||(/^[a-zA-Z0-9]{20}$/.test(value)));\n  // }\n  getMessage: () => '请输入30位以内的字母数字或组合',\n  validate: value => {\n    return (/^[a-zA-Z0-9]{1,30}$/.test(value));\n  }\n});\n\n/** 限制最大数值 */\nValidator.extend('maxnumber', {\n  getMessage: (field,params,data) =>{\n    return data;\n  },\n  validate: (value,num) => {\n    return new Promise(resolve=>{\n      let _float_result=true;\n      let _message=''\n      if(isNaN(Number(value))){\n        _float_result=false;\n        _message='请输入数字';\n      }\n      else{\n          _float_result= (Number(value)<=Number(num[0]))\n          _message='限制取值范围为:'+ num[0]+'~'+num[1]\n      }\n      resolve({\n        valid:_float_result,\n        data:_message\n      })\n    })\n    // return /^-?\\d+\\.\\d{0,2}$/.test(value)||/^-?\\d+$/.test(value);\n  }\n});\n/** 限制最小数值 */\nValidator.extend('minnumber', {\n  getMessage: (field,params,data) =>{\n    return data;\n  } ,\n  validate: (value,num) => {\n    return new Promise(resolve=>{\n      let _float_result=true;\n      let _message=''\n      if(isNaN(Number(value))){\n        _float_result=false;\n        _message='请输入数字';\n      }\n      else{\n          _float_result= Number(value)>=Number(num[0])\n          _message='限制最小数值为:'+num[0]\n      }\n      resolve({\n        valid:_float_result,\n        data:_message\n      })\n    })\n    // return /^-?\\d+\\.\\d{0,2}$/.test(value)||/^-?\\d+$/.test(value);\n  }\n});\n\n/** 限制在某一个数值范围 */\nValidator.extend('minmaxnumber', {\n  getMessage: (field,params,data) =>{\n    return data;\n  },\n  validate: (value,num) => {\n    return new Promise(resolve=>{\n      let _float_result=true;\n      let _message=''\n      if(isNaN(Number(value))){\n        _float_result=false;\n        _message='请输入数字';\n      }\n      else{\n          _float_result= (Number(value)>=Number(num[0])&&Number(value)<=Number(num[1]))\n          _message='限制取值范围为:'+ num[0]+'~'+num[1]\n      }\n      resolve({\n        valid:_float_result,\n        data:_message\n      })\n    })\n    // return /^-?\\d+\\.\\d{0,2}$/.test(value)||/^-?\\d+$/.test(value);\n  }\n});\n\nValidator.extend('number', {\n  getMessage: (field,params,data) =>{\n    return data;\n  },\n  validate: (value) => {\n    return new Promise(resolve=>{\n      let _float_result=true;\n      let _message=''\n      if(isNaN(Number(value))){\n        _float_result=false;\n        _message='请输入数字';\n      }\n      resolve({\n        valid:_float_result,\n        data:_message\n      })\n    })\n    // return /^-?\\d+\\.\\d{0,2}$/.test(value)||/^-?\\d+$/.test(value);\n  }\n});\n\nValidator.extend('fixedphone', {\n  getMessage: field => '请输入正确的固定号码',\n  validate: value => {\n    let aa=new RegExp(\"^(0[0-9]{2,3}/-)?([2-9][0-9]{6,7})+(/-[0-9]{1,4})?$\")\n    return /^0\\d{2,3}-?\\d{7,8}$/.test(value);\n  }\n});\nValidator.extend('fixed_mobile_phone', {\n  getMessage: field => '请输入正确的固定号码或电话号码',\n  validate: value => {\n    return (value.length == 11 && /^((13|14|15|16|17|18|19)[0-9]{1}\\d{8})$/.test(value)) || (/^0\\d{2,3}-?\\d{7,8}$/.test(value));\n  }\n});\nValidator.extend('mobilephone', {\n  getMessage: field => '请输入正确的手机号码',\n  validate: value => {\n    return (value.length == 11 && /^((13|14|15|16|17|18|19)[0-9]{1}\\d{8})$/.test(value));\n  }\n});\nValidator.extend('required_username', {\n  getMessage:  () => '账号不能为空',\n  validate: value => {\n  }\n});\nValidator.extend('password', {\n  getMessage: () => '密码为6-20位，字母、数字或符号的组合',\n  validate: value => {\n    return /^[0-9a-zA-Z.!@#$^]{6,20}$/.test(value)||value=='********'\n  }\n});\nValidator.extend('jingdu', {\n  getMessage: () => '经度范围为0-180',\n  validate: value => {\n    let val = parseFloat(value);\n    return val <= 180 && val >= 0\n  }\n})\nValidator.extend('weidu', {\n  getMessage: () => '纬度范围为0-90',\n  validate: value => {\n    let val = parseFloat(value);\n    return val <= 90 && val >= 0\n  }\n})\nValidator.extend('postcode', {\n  getMessage: () => '请输入正确的邮政编码',\n  validate: value => {\n    let val = parseFloat(value);\n    return /^[0-9]{6}$/.test(value);\n  }\n})\nValidator.extend('idcard', {\n  getMessage: () => '请输入合法的身份证号码',\n  validate: value => {\n    let val = IdentityCodeValid(value);\n    return val;\n  }\n})\nValidator.extend('companycode', {\n  getMessage: () => '请输入合法的组织机构代码',\n  validate: value => {\n    return /^[a-zA-Z0-9\\-]{1,18}$/.test(value);\n    // return (/^\\d{8}-\\d{1}$/.test(value)||/^[0-9a-zA-Z]{18}$/.test(value));\n  }\n})\nValidator.extend('float',{\n  getMessage: (field,params,data) =>{\n    return data;\n  } ,\n  validate: value => {\n    return new Promise(resolve=>{\n      let _float_result=true;\n      let _message=''\n      if(isNaN(Number(value))){\n        _float_result=false;\n        _message='请输入数字';\n      }\n      else{\n        let a=value.toString().split('.');\n        if(typeof(a[1])!='undefined'){\n          if(a[1]==''){\n            _float_result=false;\n            _message='请输入正确的小数';\n          }\n          if(a[1].length>2){\n            _float_result=false;\n            _message='小数位数不能超过2位';\n          }\n        }\n      }\n      resolve({\n        valid:_float_result,\n        data:_message\n      })\n    })\n    // return /^-?\\d+\\.\\d{0,2}$/.test(value)||/^-?\\d+$/.test(value);\n  }\n});\n\nValidator.extend('float1',{\n  getMessage: (field,params,data) =>{\n    return data;\n  } ,\n  validate: value => {\n    return new Promise(resolve=>{\n      let _float_result=true;\n      let _message=''\n      if(isNaN(Number(value))){\n        _float_result=false;\n        _message='请输入数字';\n      }\n      else{\n        let a=value.toString().split('.');\n        if(typeof(a[1])!='undefined'){\n          if(a[1]==''){\n            _float_result=false;\n            _message='请输入正确的小数';\n          }\n          if(a[1].length>1){\n            _float_result=false;\n            _message='小数位数不能超过1位';\n          }\n        }\n      }\n      resolve({\n        valid:_float_result,\n        data:_message\n      })\n    })\n    // return /^-?\\d+\\.\\d{0,2}$/.test(value)||/^-?\\d+$/.test(value);\n  }\n})\n\nValidator.extend('floatthree', {\n  getMessage: () => '请输入3位及以下数字',\n  validate: value => {\n    return ((value.length <= 3) && /^[0-9]*$/.test(value));\n  }\n})\n\nValidator.extend('devicecode', {\n  getMessage: () => '请输入30位以内的字母数字或组合',\n  validate: value => {\n    return (/^[a-zA-Z0-9]{1,30}$/.test(value));\n  }\n})\n\nValidator.extend('macaddress', {\n  getMessage: () => '请输入正确的主机地址(例:0A-0B-0C-0D-0E-0F)',\n  validate: value => {\n    return (/^[A-F\\d]{2}-[A-F\\d]{2}-[A-F\\d]{2}-[A-F\\d]{2}-[A-F\\d]{2}-[A-F\\d]{2}$/.test(value));\n  }\n})\n\nValidator.extend('loginusername', {\n  getMessage: () => '请输入正确的账号',\n  validate: value => {\n    return (/^((13|14|15|16|17|18|19)[0-9]{1}\\d{8})$/.test(value) ) || (/^([a-zA-Z]{1}[a-zA-Z0-9]|[._])/.test(value))\n  }\n})\nValidator.extend('loginpassword', {\n  getMessage: () => '登录密码不能为空',\n  validate: value => {\n    return (value.length>0)\n  }\n})\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/visitbaidu/validate.js"],"sourceRoot":""}